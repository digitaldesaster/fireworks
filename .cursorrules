# AI Instruction File

This document serves as a guide for code generation and modification in our **Python Flask + HTMX + Tailwind + FlyonUI** project.

---

## 1. Tech Stack Expertise

- **Backend**

  - Python 3.x
  - Flask (RESTful patterns)
  - MongoDB with MongoEngine

- **Frontend**

  - HTMX (dynamic updates)
  - Tailwind CSS (utility-first)
  - FlyonUI (component library) - documentation: in flyonui-docs folder

- **Security**
  - Flask-Login (authentication)
  - CSRF protection
  - Secure session management

---

## 2. Core Principles

1. **Security First**

   - Environment variables for secrets
   - CSRF protection on all forms
   - Secure session management
   - Input validation and sanitization

2. **Clean Code**

   - Functional, declarative style
   - Early returns for error handling
   - Clear naming conventions
   - Type hints where beneficial

3. **User Experience**

   - Meaningful error messages
   - Progressive enhancement
   - Responsive design
   - Fast page loads

4. **Maintainability**
   - Modular components
   - Clear documentation
   - Consistent patterns
   - Version control best practices

---

## 3. Implementation Guidelines

### Python/Flask

```python
# Function definitions with type hints
def process_user_data(data: dict) -> dict:
    if not data:
        return {"error": "No data provided"}
    return {"status": "success", "data": data}

# Early returns
def validate_input(data: dict) -> tuple[bool, str]:
    if not data.get('email'):
        return False, "Email required"
    if not data.get('password'):
        return False, "Password required"
    return True, ""

# Route organization
@app.route('/api/users', methods=['POST'])
@login_required
def create_user():
    is_valid, error = validate_input(request.json)
    if not is_valid:
        return {"error": error}, 400
    # Continue with valid data
```

### HTML/Templates

```html
<!-- Component structure -->
<div class="component-wrapper">
  <form hx-post="/api/action" class="form-class">
    {% include "partials/csrf_token.html" %}
    <!-- Form content -->
  </form>
</div>

<!-- Error handling -->
{% if error %}
<div class="alert alert-error">{{ error_message }}</div>
{% endif %}
```

### Project Structure

```
project/
├── app.py              # Application entry
├── blueprints/         # Route modules
├── core/              # Core functionality
├── static/            # Assets
├── templates/         # HTML templates
└── tests/             # Test suite
```

---

## 4. Security Requirements

1. **Authentication**

   - Flask-Login for session management
   - Remember-me functionality
   - Secure password handling

2. **Data Protection**

   - CSRF tokens on all forms
   - HTTPOnly cookies
   - XSS prevention
   - Input validation

3. **Environment**
   - Secrets in .env
   - Debug mode in development only
   - Secure headers in production

---

## 5. Quality Standards

1. **Code Quality**

   - PEP 8 compliance
   - Type hints where beneficial
   - Docstrings for complex functions
   - Clear error messages

2. **Testing**

   - Unit tests for core functionality
   - Integration tests for routes
   - Security testing
   - UI/UX testing

3. **Documentation**
   - Updated CHANGELOG.md
   - Clear commit messages
   - API documentation
   - Setup instructions

---

## 6. Development Workflow

1. **Version Control**

   - Feature branches
   - Meaningful commit messages
   - Regular small commits
   - Pull request reviews

2. **Deployment**
   - Environment-specific configs
   - Backup procedures
   - Rollback plans
   - Monitoring setup
